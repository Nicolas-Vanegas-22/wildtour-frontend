import{a as n}from"./index-NIGUFBhG.js";const c="http://localhost:5000/api";class i{constructor(){this.client=n.create({baseURL:c,timeout:3e4,headers:{"Content-Type":"application/json",Accept:"application/json"}}),this.setupInterceptors()}setupInterceptors(){this.client.interceptors.request.use(e=>{const r=localStorage.getItem("wildtour-token");return r&&(e.headers.Authorization=`Bearer ${r}`),e},e=>Promise.reject(e)),this.client.interceptors.response.use(e=>e,e=>{var r;return((r=e.response)==null?void 0:r.status)===401&&(localStorage.removeItem("wildtour-token"),localStorage.removeItem("wildtour-user"),window.location.href="/login"),Promise.reject(e)})}async get(e,r){try{const t=await this.client.get(e,r);return this.handleResponse(t)}catch(t){throw this.handleError(t)}}async post(e,r,t){try{const a=await this.client.post(e,r,t);return this.handleResponse(a)}catch(a){throw this.handleError(a)}}async put(e,r,t){try{const a=await this.client.put(e,r,t);return this.handleResponse(a)}catch(a){throw this.handleError(a)}}async patch(e,r,t){try{const a=await this.client.patch(e,r,t);return this.handleResponse(a)}catch(a){throw this.handleError(a)}}async delete(e,r){try{const t=await this.client.delete(e,r);return this.handleResponse(t)}catch(t){throw this.handleError(t)}}async upload(e,r,t){try{const a=await this.client.post(e,r,{...t,headers:{"Content-Type":"multipart/form-data",...t==null?void 0:t.headers}});return this.handleResponse(a)}catch(a){throw this.handleError(a)}}handleResponse(e){return{success:!0,data:e.data,message:e.data.message}}handleError(e){var r;if(e.response){const t=((r=e.response.data)==null?void 0:r.message)||"Error del servidor",a=new Error(t);return a.status=e.response.status,a.data=e.response.data,a}else return e.request?new Error("Error de conexión. Verifica tu conexión a internet."):new Error(e.message||"Error desconocido")}setAuthToken(e){this.client.defaults.headers.common.Authorization=`Bearer ${e}`}removeAuthToken(){delete this.client.defaults.headers.common.Authorization}}const o=new i;class h{async login(e){try{const r=await o.post("/auth/login",e);if(r.success&&r.data)return r.data;throw new Error(r.message||"Error al iniciar sesión")}catch(r){throw console.error("Login error:",r),r}}async register(e){try{const r=await o.post("/User",e);if(r.success&&r.data)return r.data;throw new Error(r.message||"Error al registrar usuario")}catch(r){throw console.error("Register error:",r),r}}async logout(){try{await o.post("/auth/logout")}catch(e){console.error("Logout error:",e)}}async verifyToken(){try{const e=await o.get("/auth/me");if(e.success&&e.data)return e.data;throw new Error("Token inválido")}catch(e){throw console.error("Token verification error:",e),e}}async refreshToken(){try{const e=await o.post("/auth/refresh");if(e.success&&e.data)return e.data;throw new Error("Error al refrescar token")}catch(e){throw console.error("Token refresh error:",e),e}}async forgotPassword(e){try{const r=await o.post("/auth/forgot-password",e);if(r.success&&r.data)return r.data;throw new Error(r.message||"Error al solicitar recuperación de contraseña")}catch(r){throw console.error("Forgot password error:",r),r}}async resetPassword(e){try{const r=await o.post("/auth/reset-password",e);if(r.success&&r.data)return r.data;throw new Error(r.message||"Error al restablecer contraseña")}catch(r){throw console.error("Reset password error:",r),r}}async changePassword(e){try{const r=await o.put("/auth/change-password",e);if(r.success&&r.data)return r.data;throw new Error(r.message||"Error al cambiar contraseña")}catch(r){throw console.error("Change password error:",r),r}}async updateProfile(e){try{let r;if(e.avatar){const t=new FormData;t.append("firstName",e.firstName||""),t.append("lastName",e.lastName||""),t.append("phone",e.phone||""),t.append("avatar",e.avatar),r=await o.upload("/auth/profile",t)}else{const{avatar:t,...a}=e;r=await o.put("/auth/profile",a)}if(r.success&&r.data)return r.data;throw new Error(r.message||"Error al actualizar perfil")}catch(r){throw console.error("Update profile error:",r),r}}async verifyEmail(e){try{const r=await o.post(`/auth/verify-email/${e}`);if(r.success&&r.data)return r.data;throw new Error(r.message||"Error al verificar email")}catch(r){throw console.error("Email verification error:",r),r}}async resendVerificationEmail(){try{const e=await o.post("/auth/resend-verification");if(e.success&&e.data)return e.data;throw new Error(e.message||"Error al reenviar verificación")}catch(e){throw console.error("Resend verification error:",e),e}}async getProfile(){try{const e=await o.get("/auth/profile");if(e.success&&e.data)return e.data;throw new Error("Error al obtener perfil")}catch(e){throw console.error("Get profile error:",e),e}}async deleteAccount(e){try{const r=await o.delete("/auth/account",{data:{password:e}});if(r.success&&r.data)return r.data;throw new Error(r.message||"Error al eliminar cuenta")}catch(r){throw console.error("Delete account error:",r),r}}}const p=new h;export{p as a};
